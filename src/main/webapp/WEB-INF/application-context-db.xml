<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
 
 	<bean id="placeHolderDefault" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:database.properties" />
	</bean>
 	 
     <!-- Simple implementation of the standard JDBC DataSource interface,  configuring the plain old JDBC DriverManager via bean properties -->
   <bean id="dataSourceDevelopment" class="org.apache.commons.dbcp.BasicDataSource">
      <property name="driverClassName" value="${mysql.classname}" />
      <property name="url" value="${mysql1.url}" />
      <property name="username" value="${mysql1.user}" />
      <property name="password" value="${mysql1.password}" />
   </bean>
   
   <!-- Simple implementation of the standard JDBC DataSource interface, configuring the plain old JDBC DriverManager via bean properties -->
   <bean id="dataSourceProduction" class="org.apache.commons.dbcp.BasicDataSource">
      <property name="driverClassName" value="${mysql.classname}" />
      <property name="url" value="${mysql2.url}" />
      <property name="username" value="${mysql2.user}" />
      <property name="password" value="${mysql2.password}" />
   </bean>
    
    
    
    <!-- This produces a container-managed EntityManagerFactory; rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
    <bean id="entityManagerFactoryBeanDevelopment" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="dataSource" ref="dataSourceDevelopment" />
      <property name="persistenceUnitName" value="supplychainDevelopment"/>
      <!-- This makes /META-INF/persistence.xml is no longer necessary -->
      <property name="packagesToScan" value="br.supplychain" />
      <!-- JpaVendorAdapter implementation for Hibernate EntityManager. Exposes Hibernate's persistence provider and EntityManager extension interface -->
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>
      <property name="jpaProperties">
         <props>
            <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
            <prop key="hibernate.dialect">${hibernate.dialect}</prop>
            <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
            <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
            
            <prop key="hibernate.c3p0.timeout">${hibernate.c3p0.timeout}</prop>
            <prop key="hibernate.c3p0.min_size">${hibernate.c3p0.min_size}</prop>
            <prop key="hibernate.c3p0.max_size">${hibernate.c3p0.max_size}</prop>
            <prop key="hibernate.c3p0.max_statements">${hibernate.c3p0.max_statements}</prop>
            <prop key="hibernate.c3p0.maxIdleTimeExcessConnections">${hibernate.c3p0.maxIdleTimeExcessConnections}</prop>
            <prop key="hibernate.c3p0.testConnectionOnCheckout">${hibernate.c3p0.testConnectionOnCheckout}</prop>
            <prop key="hibernate.c3p0.validate">${hibernate.c3p0.validate}</prop>
            <prop key="hibernate.c3p0.idle_test_period">${hibernate.c3p0.idle_test_period}</prop>
            <prop key="hibernate.c3p0.contextClassLoaderSource">${hibernate.c3p0.contextClassLoaderSource}</prop>
            <prop key="hibernate.c3p0.privilegeSpawnedThreads">${hibernate.c3p0.privilegeSpawnedThreads}</prop>
            <prop key="hibernate.c3p0.automaticTestTable">${hibernate.c3p0.automaticTestTable}</prop>
            <prop key="hibernate.c3p0.connection.provider_class">${hibernate.connection.provider_class}</prop>
            
         </props>
      </property>
   </bean>
   
   <bean id="entityManagerFactoryBeanProduction" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="dataSource" ref="dataSourceProduction" />
      <property name="persistenceUnitName" value="supplychainProduction"/>
      <!-- This makes /META-INF/persistence.xml is no longer necessary -->
      <property name="packagesToScan" value="br.supplychain" />
      <!-- JpaVendorAdapter implementation for Hibernate EntityManager. Exposes Hibernate's persistence provider and EntityManager extension interface -->
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>
      <property name="jpaProperties">
         <props>
            <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
            <prop key="hibernate.dialect">${hibernate.dialect}</prop>
            <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
            <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
            
            <prop key="hibernate.c3p0.timeout">${hibernate.c3p0.timeout}</prop>
            <prop key="hibernate.c3p0.min_size">${hibernate.c3p0.min_size}</prop>
            <prop key="hibernate.c3p0.max_size">${hibernate.c3p0.max_size}</prop>
            <prop key="hibernate.c3p0.max_statements">${hibernate.c3p0.max_statements}</prop>
            <prop key="hibernate.c3p0.maxIdleTimeExcessConnections">${hibernate.c3p0.maxIdleTimeExcessConnections}</prop>
            <prop key="hibernate.c3p0.testConnectionOnCheckout">${hibernate.c3p0.testConnectionOnCheckout}</prop>
            <prop key="hibernate.c3p0.validate">${hibernate.c3p0.validate}</prop>
            <prop key="hibernate.c3p0.idle_test_period">${hibernate.c3p0.idle_test_period}</prop>
            <prop key="hibernate.c3p0.contextClassLoaderSource">${hibernate.c3p0.contextClassLoaderSource}</prop>
            <prop key="hibernate.c3p0.privilegeSpawnedThreads">${hibernate.c3p0.privilegeSpawnedThreads}</prop>
            <prop key="hibernate.c3p0.automaticTestTable">${hibernate.c3p0.automaticTestTable}</prop>
			<prop key="hibernate.c3p0.connection.provider_class">${hibernate.connection.provider_class}</prop>
         </props>
      </property>
   </bean>
 
   
    
    <!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access. 
    	JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
    <bean id="transactionManagerDevelopment" class="org.springframework.orm.jpa.JpaTransactionManager">
      <property name="entityManagerFactory" ref="entityManagerFactoryBeanDevelopment" />
      <qualifier value="transactionManagerDevelopment" />
   </bean>
   
    <bean id="transactionManagerProduction" class="org.springframework.orm.jpa.JpaTransactionManager">
      <property name="entityManagerFactory" ref="entityManagerFactoryBeanProduction" />
      <qualifier value="transactionManagerProduction" />
   </bean>
   
   <!-- responsible for registering the necessary Spring components that power annotation-driven transaction management; 
        such as when @Transactional methods are invoked -->
   <tx:annotation-driven />
   
</beans>